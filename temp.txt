// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {ISqrt, INPUT_SIZE} from "src/SqrtChallenge.sol";
import {Fixed18} from "src/Fixed18.sol";

contract MySolution is ISqrt {
    uint256 MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
    event LogTest(Fixed18 x, Fixed18 y, Fixed18 count);
    event LogTest2(bool flag, Fixed18 mid);
    event LogString(string info);
    event LogString2(string info, Fixed18 y, Fixed18 z);
    function sqrt(Fixed18[INPUT_SIZE] calldata input)
        external
        returns (Fixed18[INPUT_SIZE] memory output)
    {
        for (uint256 i = 0; i < input.length; ++i) {
            uint256 count = 0;
            Fixed18 z = (input[i].add(Fixed18.wrap(1))).div(Fixed18.wrap(2 ether));
            Fixed18 y = input[i];
            Fixed18 tem_z;
            bool flag = false;
            Fixed18 x_again;
            Fixed18 y_again;
            emit LogTest(z, y, input[i]);
            while (y.gt(z)) {
                y = z;
                z = ((input[i].div(z.mul(Fixed18.wrap(10**36))).add(z))).div(Fixed18.wrap(2 ether));
                tem_z = ((input[i].div(z.mul(Fixed18.wrap(10**36))).add(z))).div(Fixed18.wrap(2 ether));
                if ( !z.gt(tem_z)&&  !flag ){
                    flag = true;
                    x_again = z;
                    y_again = y;
                    emit LogString2("FindYou", y, z );
                }
            }
            Fixed18 min_distance = Fixed18.wrap(MAX_INT);
            Fixed18 min_z;
            Fixed18 original = input[i];

            // if( !z.mul(z).distance(input[i]).div(z).lt(Fixed18.wrap(0.0001 * 10 ** 18)) ){
            emit LogString2("Start Second Step", y_again , x_again);
            while ( y_again.gt(x_again) ){
                Fixed18 mid = ((x_again.add(y_again)).div(Fixed18.wrap(2 ether)));
                emit LogString2("ShowMidAndMidDistance", mid, mid.mul(Fixed18.wrap(10**36)).mul(mid).distance(original));
                if( y_again.mul(y_again).distance(original).div(y_again).lt(x_again.mul(x_again).distance(original).div(x_again)) ){
                    x_again = mid;
                    if ( mid.mul(mid).distance(original).div(mid).lt( y_again.mul(y_again).distance(original).div(y_again) ) ) {
                        if ( mid.mul(mid).distance(original).div(mid).lt(min_distance) ){
                            min_distance = mid.mul(mid).distance(original).div(mid);
                            min_z = mid;
                        } else{
                            break;
                        }
                    } else{
                        if ( y_again.mul(y_again).distance(original).div(y_again).lt(min_distance) ){
                            min_distance = y_again.mul(y_again).distance(original).div(y_again);
                            min_z = y_again;
                        }else{
                            break;
                        }
                    }
                }else{
                    y_again = mid;
                    emit LogString("Here");
                    if ( mid.mul(mid).distance(original).div(mid).lt( x_again.mul(x_again).distance(original).div(x_again) ) ) {
                        if ( mid.mul(mid).distance(original).div(mid).lt(min_distance) ){
                            min_distance = mid.mul(mid).distance(original).div(mid);
                            min_z = mid;
                        }else{
                            break;
                        }
                    } else{
                        emit LogString("Here2");
                        if ( x_again.mul(x_again).distance(original).div(x_again).lt(min_distance) ){
                            min_distance = x_again.mul(x_again).distance(original).div(x_again);
                            min_z = x_again;
                        }else{
                            break;
                        }
                    }
                }
                z = min_z;
                    // emit LogTest(x_again, y_again, mid);
                    // if (mid.mul(mid).distance(input[i]).div(mid).lt(Fixed18.wrap(0.0001 * 10 ** 18))){
                    //     z = mid;
                    //     break;
                    // }
                    // Fixed18 mid_x_move = (y_again.add(mid)).div(Fixed18.wrap(2 ether));
                    // Fixed18 mid_y_move = (x_again.add(mid)).div(Fixed18.wrap(2 ether));
                    // if( mid_x_move.mul(Fixed18.wrap(10**36)).mul(mid_x_move).distance(input[i]).lt(mid_y_move.mul(Fixed18.wrap(10**36)).mul(mid_y_move).distance(input[i])) ){
                    //     x_again = mid;
                    // }else{
                    //     y_again = mid;
                    // }
                // }

            }
            emit LogString2("Had Second Step", z , min_distance);


            output[i] = z;
            emit LogString("---------------");
        }
    }


}

// def sqrt(a):
//     if a < 0:
//         return -1

//     i, j = 0, a
//     while i<= j:
//         mid = (i+j)/2
//         if abs(mid**2-a)<=0.01:
//             return mid
//         elif mid**2-a>0.01:
//             j = mid
//         else:
//             i = mid

// uint z = (x + 1) / 2;
// y = x;
// while (z < y) {
//     y = z;
//     z = (x / z + z) / 2;
// }
